Constructor:
* model - DatabasesModel
* view - DatabaseFragment
* databases - property that holds a List of Database instances 

* EXPORT_RC - request code used when exporting database
* exportIndex - used to identify which database to export after user chose location in export database dialog

* exportSelected(i)
i - database index
1. calls view.exportDialog(i)
2. saves database index `i` to exportIndex

* exportDatabase(location) - exports database (identified by `exportIndex`):
location - string representing location where to export the database
2. calls model.exportDatabase(name, location) in try-catch block
handling all errors:
2.1 if there are no errors - calls view.showSuccess() to
show dialog about success
2.2 if there are any errors - calls view.showError(title, details)
to show error dialog with helpful information
title - title of error dialog
details - details about particular exception that occurred

* deleteSelected(i)
calls view.confirmDelete(i) 

* deleteDatabase(name) - deletes given database
name - name of the database to delete
1. calls model.deleteDatabase(name) in try-catch block handling all errors
1.1 if there are any errors calls view.showError(title, details)
1.2.1 if there are no errors calls view.showSuccess()
1.2.2 calls view.adapter.removeItem(name)

* closeSelected(i) - decides whether to close database depending on whether it is saved or not
1. if it is saved then just call closeDatabase(i)
2. if it is not then call view.confirmClose(i) to show a dialog of close confirmation

* closeDatabase(i) - closes given database
i - database index
1. Retrieves database by its index
2. sets database.password to null
3. calls view.notifyChanged(i) - so that adapter can change database lock icon

* editSelected(i) 
1. serializes database to json using model.dumps()
2. calls view.navigateToEdit(databaseJson) passing through serializes database string

* openDatabase(i) - opens given database
i - database index
1. Retrieves database by its index
1.2 serializes database using model.dumps()
2. if database.isOpen is true then call view.startDatabase(databaseJson)
3. if it's false then navigates to OpenDatabaseFragment passing through the Database instance

* checkTarFile(path) - checks given database tar file on correctness
path - path to database tar file
1. reads content of tar file into variable `tarFile`
2. create empty string `issues`
3. if 'src/*.db' not found in `tarFile` adds "doesn't contain .db file" to `issues`
4. if 'src/*.bin' not found in `tarFile` adds "doesn't contain .bin file" to `issues`
5. if length of `tarFile` is less then 116 bytes adds "is probably corrupted,
minimal size should be 116 bytes" to issues
6. if issues is not empty then call view.showWarning(title, issues)
title - "Are you sure you want to import this file?"

* isDatabaseSaved(i)
0. retrieve database by its index to `actualDatabase`
1. creates `diskDatabase` Database instance with name, password and salt from actual
database
2. calls model.openDatabase(diskDatabase) to get content of database on the disk
3. compares actualDatabase.data and diskDatabase.data and returns resulting boolean
